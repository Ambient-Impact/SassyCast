@include test('to-map(..)') {
  $tests: (
    1: ('value': (1: 1), 'type': 'map'),
    42: ('value': (1: 42), 'type': 'map'),
    -42: ('value': (1: -42), 'type': 'map'),
    -4.2: ('value': (1: -4.2), 'type': 'map'),
    4.2: ('value': (1: 4.2), 'type': 'map'),
    42em: ('value': (1: 42em), 'type': 'map'),
    -42em: ('value': (1: -42em), 'type': 'map'),
    -4.2em: ('value': (1: -4.2em), 'type': 'map'),
    4.2em: ('value': (1: 4.2em), 'type': 'map'),
    '': ('value': (1: ''), 'type': 'map'),
    'string': ('value': (1: 'string'), 'type': 'map'),
    'this is a string': ('value': (1: 'this is a string'), 'type': 'map'),
    'true': ('value': (1: 'true'), 'type': 'map'),
    'false': ('value': (1: 'false'), 'type': 'map'),
    '0': ('value': (1: '0'), 'type': 'map'),
    '-0': ('value': (1: '-0'), 'type': 'map'),
    '1': ('value': (1: '1'), 'type': 'map'),
    '42': ('value': (1: '42'), 'type': 'map'),
    '4.2': ('value': (1: '4.2'), 'type': 'map'),
    '-42': ('value': (1: '-42'), 'type': 'map'),
    '-4.2': ('value': (1: '-4.2'), 'type': 'map'),
    '42em': ('value': (1: '42em'), 'type': 'map'),
    '4.2em': ('value': (1: '4.2em'), 'type': 'map'),
    '-42em': ('value': (1: '-42em'), 'type': 'map'),
    '-4.2em': ('value': (1: '-4.2em'), 'type': 'map'),
    '#000': ('value': (1: '#000'), 'type': 'map'),
    '#000000': ('value': (1: '#000000'), 'type': 'map'),
    'black': ('value': (1: 'black'), 'type': 'map'),
    'rgb(0,0,0)': ('value': (1: 'rgb(0,0,0)'), 'type': 'map'),
    'rgba(0,0,0,.5)': ('value': (1: 'rgba(0,0,0,.5)'), 'type': 'map'),
    'hsl(0,0,0)': ('value': (1: 'hsl(0,0,0)'), 'type': 'map'),
    'hsla(0,0,0, .5)': ('value': (1: 'hsla(0,0,0, .5)'), 'type': 'map'),
    #000: ('value': (1: #000), 'type': 'map'),
    #ffffff: ('value': (1: #ffffff), 'type': 'map'),
    red: ('value': (1: red), 'type': 'map'),
    rgb(10, 20, 30): ('value': (1: rgb(10, 20, 30)), 'type': 'map'),
    rgba(30, 20, 10, 0.5): ('value': (1: rgba(30, 20, 10, 0.5)), 'type': 'map'),
    hsl(10, 20, 30): ('value': (1: hsl(10, 20, 30)), 'type': 'map'),
    hsla(30, 20, 10, 0.5): ('value': (1: hsla(30, 20, 10, 0.5)), 'type': 'map'),
    true: ('value': (1: true), 'type': 'map'),
    false: ('value': (1: false), 'type': 'map'),
    (this, is, a, list): ('value': (1: this, 2: is, 3: a, 4: list), 'type': 'map'),
    (this is a list): ('value': (1: this, 2: is, 3: a, 4: list), 'type': 'map'),
    ('a': 1, 'b': 2): ('value': ('a': 1, 'b': 2), 'type': 'map'),
    null: ('value': (1: null), 'type': 'map'),
  );

  @each $test, $expect in $tests {
    $actual-value: to-map($test);
    $actual-type: type-of($actual-value);

    $expected-value: map-get($expect, 'value');
    $expected-type: map-get($expect, 'type');

    @include assert-equal($actual-value, $expected-value, 'Cast to map.');
    @include assert-equal($actual-type, $expected-type, 'Cast to map.');
  }
}
